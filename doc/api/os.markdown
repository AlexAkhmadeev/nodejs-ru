# OS

    Стабильность: 2 - Стабильный
    

Предоставляет несколько простых функций, относящихся к операционной системе.

Используйте `require('os')` для доступа к этому модулю.

## os.tmpdir()

Возвращает каталог по умолчанию для временных файлов операционной системы.

## os.endianness()

Возвращает порядок байтов процессора. Возможными значениями могут быть `«BE»` для порядка байтов от старшего к младшему или `«LE»` для порядка байтов от младшего к старшему.

## os.hostname()

Возвращает имя хоста операционной системы.

## os.type()

Возвращает название операционной системы. Например `'Linux'`для Linux, `'Darwin'` для OS X и `'Windows_NT'` для Windows.

## os.platform()

Возвращает платформу операционной системы. Возможными значения могут быть - `'darwin'`, `'freebsd'`, `'linux'`, `'sunos'` или `'win32'`. Возвращает значение `process.platform`.

## os.arch()

Возвращает архитектуру процессора операционной системы. Возможными значениями являются `«x64»`, `«arm»` и `«ia32»`. Возвращает значение `process.arch`.

## os.release()

Возвращает версию операционной системы.

## os.uptime()

Возвращает время непрерывной работы системы в секундах.

## os.loadavg()

Возвращает массив, содержащий среднюю загрузку системы за 1, 5 и 15 минут.

Средняя загрузка является мерой активности системы, которая определяется операционной системой и выражена в виде дробного числа. Как правило средняя загрузка в идеале должна быть меньше количества логических процессоров в системе.

Средняя нагрузка является исключительно UNIX-концепцией; нет реального эквивалента для платформы Windows. Поэтому эта функция в Windows всегда возвращает `[0, 0, 0]`.

## os.totalmem()

Возвращает общее количество системной памяти в байтах.

## os.freemem()

Возвращает количество свободной системной памяти в байтах.

## os.cpus()

Возвращает массив объектов, содержащих сведения о каждом установленном процессоре/ядре: модель, тактовая частота (в МГц) и время (объект, содержащий количество миллисекунд, которое ядро ЦП провело в режиме: user, nice, sys, idle и irq).

Пример результата os.cpus():

    [ { model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
        speed: 2926,
        times:
         { user: 252020,
           nice: 0,
           sys: 30340,
           idle: 1070356870,
           irq: 0 } },
      { model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
        speed: 2926,
        times:
         { user: 306960,
           nice: 0,
           sys: 26980,
           idle: 1071569080,
           irq: 0 } },
      { model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
        speed: 2926,
        times:
         { user: 248450,
           nice: 0,
           sys: 21750,
           idle: 1070919370,
           irq: 0 } },
      { model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
        speed: 2926,
        times:
         { user: 256880,
           nice: 0,
           sys: 19430,
           idle: 1070905480,
           irq: 20 } },
      { model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
        speed: 2926,
        times:
         { user: 511580,
           nice: 20,
           sys: 40900,
           idle: 1070842510,
           irq: 0 } },
      { model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
        speed: 2926,
        times:
         { user: 291660,
           nice: 0,
           sys: 34360,
           idle: 1070888000,
           irq: 10 } },
      { model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
        speed: 2926,
        times:
         { user: 308260,
           nice: 0,
           sys: 55410,
           idle: 1071129970,
           irq: 880 } },
      { model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',
        speed: 2926,
        times:
         { user: 266450,
           nice: 1480,
           sys: 34920,
           idle: 1072572010,
           irq: 30 } } ]
    
Обратите внимание, так как значение `nice` ориентировано на UNIX, в Windows оно всегда будет равно 0 для всех процессоров.
    

## os.networkInterfaces()

Возвращает список сетевых интерфейсов:

    { lo:
       [ { address: '127.0.0.1',
           netmask: '255.0.0.0',
           family: 'IPv4',
           mac: '00:00:00:00:00:00',
           internal: true },
         { address: '::1',
           netmask: 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff',
           family: 'IPv6',
           mac: '00:00:00:00:00:00',
           internal: true } ],
      eth0:
       [ { address: '192.168.1.108',
           netmask: '255.255.255.0',
           family: 'IPv4',
           mac: '01:02:03:0a:0b:0c',
           internal: false },
         { address: 'fe80::a00:27ff:fe4e:66a1',
           netmask: 'ffff:ffff:ffff:ffff::',
           family: 'IPv6',
           mac: '01:02:03:0a:0b:0c',
           internal: false } ] }

Обратите внимание, что из-за особенностей реализации будут возвращены только сетевые интерфейсы, которым назначены адреса.

## os.EOL

Константа, определяющая соответствующий указатель конца строки операционной системы.